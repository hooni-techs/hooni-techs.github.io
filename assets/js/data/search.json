[ { "title": "정보처리기사 정리", "url": "/posts/%EC%A0%95%EB%B3%B4%EC%B2%98%EB%A6%AC%EA%B8%B0%EC%82%AC-%EC%A0%95%EB%A6%AC/", "categories": "Exam", "tags": "exam", "date": "2022-07-21 00:00:00 +0900", "snippet": "[정보처리기사] 내용 정리테스트 기법 화이트박스 테스팅 ( White-Box Testing ) 구조 기반 기법, 개발자 관점에서의 단위 테스팅 기법 소프트웨어 내부 소스 코드를 보면서 필요한 정보들을 사용 컴포넌트(단위) 또는 소프트웨어의 구조를 중심으로 테스트 케이스를 도출 구조 기반 기법 소프트웨어 코드나 설계 등 구조를 보여주는 정보로부터 테스트 케이스를 도출 커버리지를 높이기 위해 테스트 케이스를 시스템적으로 도출 추가 가능 [ 구조 기반 기법 기본 ] 구조 기반 기법 ( Structure-based technique ) 코드와 개발 설계 등의 소프트웨어 구현 정보를 기반으로 테스트 케이스를 설계하는 기법 구문 테스팅과 커버리지 ( Statement testing and coverage ) 프로그램 내의 모든 문장들을 한 번 이상 수행하도록 테스트 케이스를 설계하는 기법 결정 테스팅과 커버리지 ( Decision testing and coverage ) 프로그램 내의 각 분기들을 한 번 이상 수행하도록 테스트 케이스를 설계하는 기법 전체 조건식이 최소한 참이 한 번 그리고 거짓이 한 번 선택되었는지 측정하여 퍼센트로 표현 조건 테스팅과 커버리지 ( Condition testing and coverage ) 조건들이 참이 되는 경우와 거짓이 되는 경우를 모두 수행하도록 테스트 케이스를 설계하는 기법 전체 조건식의 결과와 관계없이 각 개별 조건식이 참 한번, 거짓 한 번을 모두 갖도록 함 다중 조건 커버리지 ( Multiple condition coverage ) 프로그램 내의 모든 개별 조건식의 모든 가능한 논리적 조합을 고려한 강력한 커버리지 출시 전에 반드시 100% 결함을 제거해야 하는 제품 테스트에서 주로 사용 변형 조건/결정 커버리지 ( Modified Condition/Decision Coverage ) 각 개별 조건식이 다른 개별 조건식에 무관하게 전체 조건식의 결과에 독립적으로 영향을 줌 [ 구조 기반 기법 고급 ] 분할 ( Splitting ) 방법으로 접근한 조건/결정 커버리지 분할 ( Splitting ) : 생성한 모든 논리적 조합을 분할하여 테스트 케이스를 작성하는 방식 결함의 원인 판단은 빠르지만 테스트 케이스 수가 크게 증가하게 됨 포함 ( Including ) : 생성한 조합 중 단 하나만 선택하여 하나의 논리적 테스트 케이스를 작성 결함의 원인 판단이 느리지만 적당한 커버리지 만족과 테스트 케이스 수를 가짐 응집도, 결합도 순서 응집도 : 정보은닉 개념 확장, 응집도가 강할수록 품질이 좋음[ 응집도가 강한 순서 -&gt; 약한 순서]functional – sequential – communication – procedural – temporal – logical – coincidental기능-단일 / 순차-나온것 입력으로 / 통신-동일한입출력 다른기능수행절차-다수의 관련기능 순차수행 / 시간-특정시간 / 논리-유사한 성격 / 우연-서로 관련 없는 요소 기능적 : 모듈 내부의 모든 기능 요소들이 단일 문제와 연관되어 수행될 경우 순차적 : 모듈 내 하나의 활동으로부터 나온 출력 데이터를 그 다음활동의 입력 데이터로 사용할 경우 통신적(교환적) : 동일한 입출력을 사용하여 서로 다른 기능을 수행하는 구성 요소들이 모였을 경우 절차적 : 모듈이 다수의 관련 기능을 가질 때 모듈 안의 구성요소들이 그 기능을 순차적으로 수행할 경우 시간적 : 특정 시간에 처리되는 몇 개의 기능을 모아 하나의 모듈로 작성한 경우 논리적 : 유사한 성격을 갖거나 특정 형태로 분류되는 처리요소들이 하나의 모듈이 되는 경우 우연적 : 모듈 내부의 각 구성요소들이 서로 관련 없는 요소로만 구성된 경우 기순통절시논우 결합도 : 상호의존의 정도, 결합도가 약해야 품질이 상승[ 결합도가 약한 순서 -&gt; 강한 순서 ]data – stamp – control – external – common - content자료-데이터 / 스탬프-자료구조 / 제어-다른 모듈에서 흐름 파악 / 외부-참조 / 공통-공유되는 / 내용-직접참조,다른모듈에서 사용 자료: 어떤 모듈이 다른 모듈을 호출하면서 매개 변수나 인수로 데이터를 넘겨주고, 호출 받은 모듈은 받은 데이터에 대한 처리 결과를 다시 돌려주는 방식 스탬프: 두 모듈이 동일한 자료 구조를 조회하는 경우 제어: 한 모듈이 다른 모듈의 상세한 처리 절차를 알고 있어 이를 통제하는 경우나 처리 기능이 두 모듈에 분리되어 설계된 경우, 다른 모듈에서 흐름을 제어 외부: 어떤 모듈에서 선언한 데이터를 외부의 다른 모듈에서 참조할 때 공통: 공유되는 공통 데이터 영역을 여러 모듈이 사용할 때 내용: 한 모듈이 다른 모듈의 내부 기능 및 그 내부 자료를 직접 참조하거나 수정할 때 ( 다른 모듈에서 사용하는 경우 )자자제외공직정규화 및 이상 삽입 이상말그대로 어떠한 릴레이션에 데이터를 집어넣었더니 이상한 값들도 같이 딸려들어가는 현상입니다. 삭제 이상하나의 행을 삭제했더니, 갑자기 뜬금없이 다른 행들도 다다다닥! 삭제되는 현상입니다. 갱신이상새로고침했더니, 속성값의 일부분만 갱신되어 전체의 릴레이션의 정보가 어긋나는 현상입니다. 비정규 릴레이션 ↓ (도메인이 원자값) 1NF ↓ (부분적 함수 종속 제거) 2NF ↓ (이행적 함수 종속 제거) 3NF ↓ (결정자들 중에서 후보키가 아니라면 싹다제거) BCNF ↓ (다치 종속 제거) 4NF ↓ (조인 종속성 이용) 5NF 도부이결다조두부이거다줘디자인 패턴 MVC 패턴 : Model, View, Controller로 이루어진 패턴생성 패턴(Creational Pattern) 구조 패턴(Structural Pattern) 행위 패턴(Behavioral Pattern)객체의 생성과 관련된 패턴 클래스나 객체들을 조합하여더 큰 구조로 만들 수 있게 해주는 패턴 클래스나 객체들이 서로 상호작용하는방법이나 책임 분배 방법을 정의하는 패턴 추상 팩토리(Abstract Factory) 빌더(Builder) 팩토리 메소드(Factory Method) 프로토타입(Prototype) 싱글톤(Singleton) - 어댑터(Adapter) 브리지(Bridege) 컴포지트(Composite) 데코레이터(Decorator) 퍼싸드(Facade) 플라이웨이트(Flyweight) 프록시(Proxy) - 책임 연쇄(Chain of Responsibility) 커맨드(Command) 인터프리터(Interpreter) 반복자(Iterator) 중재자(Mediator) 메멘토(Memento) 옵서버(Observer) 상태(State) 전략(Strategy) 템플릿 메소드(Template Method) 방문자(Visitor)&lt; 생성 패턴 &gt; 추상 팩토리 동일한 주제의 다른 팩토리를 묶어줌 구체적인 클래스에 의존하지 않고 서로 연관되거나 의존적인 객체들의 조합을 만드는 인터페이스를 제공하는 패턴 빌더 생성과 표기를 분리해 복잡한 객체를 생성 팩토리 메소드 생성할 객체의 클래스를 국한하지 않고 객체를 생성 객체 생성 처리를 서브 클래스로 분리해 처리하도록 캡슐화하는 패턴 프로토타입 기존 객체를 복제함으로써 객체를 생성 싱글톤 한 클래스에 한 객체만 존재하도록 제한 전역 변수를 사용하지 않고 객체를 하나만 생성하도록 하며, 생성된 객체를 어디에서든지 참조할 수 있도록 하는 패턴&lt; 구조 패턴 &gt; 어댑터 인터페이스가 호환되지 않는 클래스들을 함께 이용할 수 있도록, 타 클래스의 인터페이스를 기존 인터페이스에 덧씌움 브리지 추상화와 구현을 분리해 둘을 각각 따로 발전시킬 수 있음 컴포지트 0개, 1개 혹은 그 이상의 객체를 묶어 하나의 객체로 이용할 수 있음 여러 개의 객체들로 구성된 복합 객체와 단일 객체를 클라리언트에서 구별없이 다루게 해주는 패턴 데코레이터 기존 객체의 매서드에 새로운 행동을 추가하거나 오버라이드 할 수 있음 퍼싸드 많은 분량의 코드에 접근할 수 있는 단순한 인터페이스를 제공 플라이웨이트 다수의 유사한 객체를 생성, 조작하는 비용을 절감할 수 있음 프록시 접근 조절, 비용 절감, 복잡도 감소를 위해 접근이 힘든 객체에 대한 대역을 제공함 &lt; 행위 패턴 &gt; 커맨드 위의 명령어를 각각 구현하는 것보다는 위 그림처럼 하나의 추상 클래스에 메서드를 하나 만들고 각 명령이 들어오면 그에 맞는 서브 클래스가 선택되어 실행하는 것 실행될 기능을 캡슐화함으로써 주어진 여러 기능을 실행할 수 있는 재사용성이 높은 클래스를 설계하는 패턴 Observer 패턴(2020 실기 1회 기출문제) 어떤 클래스에 변화가 일어났을 때, 이를 감지하여 다른 클래스에 통보해주는 것 한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들에게 연락이 가고 자동으로 내용이 갱신되는 패턴 템플릿 메소드 상위 클래스에서는 추상적으로 표현하고, 그 구체적인 내용은 하위 클래스에서 결정되는 디자인 패턴 어떤 작업을 처리하는 일부분을 서브 클래스로 캡슐화해 전체 일을 수행하는 구조는 바꾸지 않으면서 특정 단계에서 수행하는 내역을 바꾸는 패턴* 디자인 패턴 종류 설명 패킷 교환 방식[ 패킷 교환 방식 ] 패킷 : 네트워크를 통해 전송하기 쉽도록 자른 데이터 단위이며 수신하는 곳에서는 원래의 데이터로 다시 재조립됨 일정한 데이터 블록인 패킷을 교환기가 수신측 주소에 따라 적당한 통신경로를 선택하여 전송하는 교환방식 전송하고자 하는 정보를 일정한 크기의 데이터로 분할한 후, 송수신 주소인 헤더를 각각에 부가한 패킷단위로 전송하는 방식 가상 회선 방식 ( Virtual Circuit ) 데이터를 전송하기 전에 논리적 연결이 설정됨 ( 연결 지향형 ) 모든 패킷을 전송하면 가상회선이 해제되고 패킷들은 전송된 순서대로 도착함 데이터 그램 방식 ( Datagram ) 데이터를 전송하기 전에 논리적 연결이 설정되지 않으며, 패킷이 독립적으로 전송됨 패킷을 수신한 라우터는 최적의 경로를 선택하여 패킷을 전송하는데, 하나의 메시지에서 분할된 여러 패킷은 서로 다른 경로로 전성될 수 있음 ( 비연결 지향형 ) [ 회선 교환 방식 ] 송수신 단말장치 사이에서 데이터를 전송할 때마다 통신경로를 설정하여 데이터를 교환하는 방식 통화로 동작에 의해 공간분할방식과 시분할방식으로 구분 테스트 정리 테스트 레벨 : 한 번에 총체적으로 조직화하고 관리하는 테스트 활동의 묶음 단위 테스트, 통합테스트, 시스템 테스트, 인수 테스트 단위 테스트(Unit Test) 코딩 직후 SW 설계의 최소 단위인 모듈이나 컴포넌트에 초점을 맞춰 테스트 진행 사용자 요구사항을 기반으로 한 기능성 테스트 최우선 주로 구조기반(화이트박스 테스트) 시행 통합 테스트 시스템이나 시스템 구성 요소 또는 소프트웨어 프로그램의 데이터 및 기능의 인터페이스(흐름)가 정상적으로 작동하는지에 중점을 둠 단위 테스트를 통과한 개발 소프트웨어/하드웨어 컴포넌트 간 인터페이스 및 연동 기능 등을 구조적으로 접근하여 테스트 – 빅뱅 통합 테스트 : 모든 모듈을 한꺼번에 통합하고 결합 격리가 어려움– 상향식 통합 : 가장 하부의 모듈부터 통합해가면서 상부로 올라감, 드라이브가 필요– 하향식 통합 : 가장 상부의 모듈부터 통합해가면서 하부로 내려감, 스텁 필요– 백본 통합 : 소프트웨어 리스크가 높은 것을 우선적으로 통합하고 접근, 드라이버, 스텁은 필요에 따라 만들어서 사용 시스템 테스트 실제 환경과 가능한 유사한 환경에서 진행 기능적 요구사항(명세기반 기법), 비기능적 요구사항(구조기반 기법) 개발 조직과는 독립된 테스트 조직에서 수행되어야 하며 사전 요구사항이 명확해야 한다 단위, 통합 테스트가 가능한 완벽히 완료되어 가능상에 문제가 없는 상태여야 한다 추가 테스트 하네스 테스트를 지원하기 위한 코드와 데이터를 말하며 단위 테스트에 사용하기 위해 개발자가 작성 애플리케이션 컴포넌트 및 모듈을 테스트하는 환경의 일부분으로, 테스트를 지원하기 위한 코드와 데이터를 말하며, 단위 또는 모듈 테스트에 사용하기 위해 코드 개발자가 작성하는 요소 테스트 슈트 테스트 대상 컴포넌트나 시스템에 사용되는 테스트 케이스 집합 테스트 케이스 입력값, 실행 조건, 기대 결과 등의 집합 테스트 스크립트 자동화된 테스트 케이스의 절차와 실행 순서 명시 테스트 드라이버 상향식 통합 테스트에서 데이터의 입력과 출력을 확인하기 위해서 하위 모듈을 호출하는 상위의 더미 모듈 테스트 시나리오 테스트 수행을 위한 여러 테스트 케이스의 집합으로서, 테스트 케이스의 동작 순서를 기술한 문서이며 테스트를 위한 절차를 명세한 문서 테스트 오라클 테스트의 결과가 참인지 거짓인지를 판단하기 위해서 사전에 정의된 참 값을 입력하여 비교하는 기법 " }, { "title": "마크다운 markdown 작성법", "url": "/posts/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EC%9E%91%EC%84%B1%EB%B2%95-%EC%A0%95%EB%A6%AC/", "categories": "Common", "tags": "markdown", "date": "2022-07-15 00:00:00 +0900", "snippet": "[공통] 마크다운 markdown 작성법1. 마크다운에 관하여1.1. 마크다운이란?Markdown은 텍스트 기반의 마크업언어로 2004년 존그루버에 의해 만들어졌으며 쉽게 쓰고 읽을 수 있으며 HTML로 변환이 가능하다. 특수기호와 문자를 이용한 매우 간단한 구조의 문법을 사용하여 웹에서도 보다 빠르게 컨텐츠를 작성하고 보다 직관적으로 인식할 수 있다.마크다운이 최근 각광받기 시작한 이유는 깃헙(https://github.com) 덕분이다. 깃헙의 저장소Repository에 관한 정보를 기록하는 README.md는 깃헙을 사용하는 사람이라면 누구나 가장 먼저 접하게 되는 마크다운 문서였다. 마크다운을 통해서 설치방법, 소스코드 설명, 이슈 등을 간단하게 기록하고 가독성을 높일 수 있다는 강점이 부각되면서 점점 여러 곳으로 퍼져가게 된다.1.2. 마크다운의 장-단점1.2.1. 장점1. 간결하다.2. 별도의 도구없이 작성가능하다.3. 다양한 형태로 변환이 가능하다.4. 텍스트(Text)로 저장되기 때문에 용량이 적어 보관이 용이하다.5. 텍스트파일이기 때문에 버전관리시스템을 이용하여 변경이력을 관리할 수 있다.6. 지원하는 프로그램과 플랫폼이 다양하다.1.2.2. 단점1. 표준이 없다.2. 표준이 없기 때문에 도구에 따라서 변환방식이나 생성물이 다르다.3. 모든 HTML 마크업을 대신하지 못한다.2. 마크다운 사용법(문법)2.1. 헤더Headers 큰제목: 문서 제목 This is an H1 ============= This is an H1 ============= 작은제목: 문서 부제목 This is an H2 ------------- This is an H2 ————- 글머리: 1~6까지만 지원 # This is a H1## This is a H2### This is a H3#### This is a H4##### This is a H5###### This is a H6 This is a H1 This is a H2 This is a H3 This is a H4 This is a H5 This is a H6 ####### This is a H7(지원하지 않음) 2.2. BlockQuote이메일에서 사용하는 &gt; 블럭인용문자를 이용한다.&gt; This is a first blockqute.&gt;\t&gt; This is a second blockqute.&gt;\t&gt;\t&gt; This is a third blockqute. This is a first blockqute.\t&gt; This is a second blockqute.\t&gt;\t&gt; This is a third blockqute.이 안에서는 다른 마크다운 요소를 포함할 수 있다. This is a H3 List code 2.3. 목록● 순서있는 목록(번호)순서있는 목록은 숫자와 점을 사용한다.1. 첫번째2. 두번째3. 세번째 첫번째 두번째 세번째현재까지는 어떤 번호를 입력해도 순서는 내림차순으로 정의된다.1. 첫번째3. 세번째2. 두번째 첫번째 세번째 두번째딱히 개선될 것 같지는 않다. 존 그루버가 신경안쓰고 있다고…● 순서없는 목록(글머리 기호: *, +, - 지원)* 빨강 * 녹색 * 파랑+ 빨강 + 녹색 + 파랑- 빨강 - 녹색 - 파랑 빨강 녹색 파랑 빨강 녹색 파랑 빨강 녹색 파랑 혼합해서 사용하는 것도 가능하다(내가 선호하는 방식)* 1단계 - 2단계 + 3단계 + 4단계 1단계 2단계 3단계 4단계 2.4. 코드4개의 공백 또는 하나의 탭으로 들여쓰기를 만나면 변환되기 시작하여 들여쓰지 않은 행을 만날때까지 변환이 계속된다.2.4.1. 들여쓰기This is a normal paragraph: This is a code block. end code block.실제로 적용해보면,적용예:This is a normal paragraph:This is a code block.end code block.***** 한줄 띄어쓰지 않으면 인식이 제대로 안되는 문제가 발생합니다.This is a normal paragraph: This is a code block.end code block.적용예:This is a normal paragraph: This is a code block.end code block.*****2.4.1. 코드블럭코드블럭은 다음과 같이 2가지 방식을 사용할 수 있습니다: &lt;pre&gt;&lt;code&gt;{code}&lt;/code&gt;&lt;/pre&gt; 이용방식&lt;pre&gt;&lt;code&gt;public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(\"Hello, Honeymon\"); }}&lt;/code&gt;&lt;/pre&gt;public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(\"Hello, Honeymon\"); }} 코드블럭코드(“```”) 을 이용하는 방법```public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(\"Hello, Honeymon\"); }}```public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(\"Hello, Honeymon\"); }}깃헙에서는 코드블럭코드(“```”) 시작점에 사용하는 언어를 선언하여 문법강조(Syntax highlighting)이 가능하다.```javapublic class BootSpringBootApplication { public static void main(String[] args) { System.out.println(\"Hello, Honeymon\"); }}```public class BootSpringBootApplication { public static void main(String[] args) { System.out.println(\"Hello, Honeymon\"); }}2.5. 수평선 &lt;hr/&gt;아래 줄은 모두 수평선을 만든다. 마크다운 문서를 미리보기로 출력할 때 페이지 나누기 용도로 많이 사용한다.* * *********- - ---------------------------------------- 적용예 * 2.6. 링크 참조링크[link keyword][id][id]: URL \"Optional Title here\"// codeLink: [Google][googlelink][googlelink]: https://google.com \"Go google\"Link: Google 외부링크 사용문법: [Title](link)적용예: [Google](https://google.com, \"google link\") Link: Google 자동연결```일반적인 URL 혹은 이메일주소인 경우 적절한 형식으로 링크를 형성한다. 외부링크: http://example.com/ 이메일링크: address@example.com``` 외부링크: http://example.com/ 이메일링크: address@example.com2.7. 강조*single asterisks*_single underscores_**double asterisks**__double underscores__~~cancelline~~ single asterisks single underscores double asterisks double underscores cancelline 문장 중간에 사용할 경우에는 **띄어쓰기** 를 사용하는 것이 좋다. 문장 중간에 사용할 경우에는 띄어쓰기를 사용하는 것이 좋다.2.8. 이미지![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg \"Optional title\")사이즈 조절 기능은 없기 때문에 &lt;img width=\"\" height=\"\"&gt;&lt;/img&gt;를 이용한다.예&lt;img src=\"/path/to/img.jpg\" width=\"450px\" height=\"300px\" title=\"px(픽셀) 크기 설정\" alt=\"RubberDuck\"&gt;&lt;/img&gt;&lt;br/&gt;&lt;img src=\"/path/to/img.jpg\" width=\"40%\" height=\"30%\" title=\"px(픽셀) 크기 설정\" alt=\"RubberDuck\"&gt;&lt;/img&gt;&lt;/img&gt;&lt;/img&gt;2.9. 줄바꿈3칸 이상 띄어쓰기( )를 하면 줄이 바뀐다.* 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다. 이렇게* 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다.___\\\\ 띄어쓰기이렇게 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다. 이렇게 줄 바꿈을 하기 위해서는 문장 마지막에서 3칸이상을 띄어쓰기해야 한다. 이렇게 3. 마크다운 사용기3.1. 위지윅(WSYWIG) 에디터우리가 흔하게 접하는 웹에서 사용되는 에디터(네이버, 다음, 구글 등)이 대부분 위지윅 에디터에 속하며 기본적으로 HTML을 이용하여 스타일을 적용하여 문장을 꾸미는 형태를 취하게 된다. 그래서 하루패드와 같은 마크다운 에디터의 View 영역의 내용을 복사하여 붙여넣기를 하면 대체적으로 View영역에서 보이는 그대로 복사되는 편이다. 다만, 붙여넣기 이후에 문장들을 수정하려고 할 떄 문제가 되는데, 이는 스타일이 포함된 태그가 수정과정에서 변형되면서 전체적인 영향을 끼치는 탓이다. 티스토리 블로그에서는 쉽지 않고… 워드프레스의 경우에는 마크다운으로 작성된 포스트를 HTML로 변환해주는 기능을 활용하는 것이 좋다.결론은, 복사해서 붙여넣기하면 가급적이면 본문은 수정하지 않는 것이 좋다.3.2. 깃헙Github, 비트버킷Bitbucket과 요비Yobi 등최근 유행하는 협업개발플랫폼의 경우에는 마크다운을 변환하는 컨버터 기능을 기본탑재하고 있기 때문에 마크다운 문법으로 작성한 텍스트를 그대로 복사해서 붙여넣거나 업로드하는 것만으로 마크다운의 적용이 가능하다.3.3. MS워드 적용View 영역의 항목을 그대로 붙여넣거나 HTML 내보내기 등으로 생성한 파일을 불러오는 형태로 사용가능하다. 적용한 헤더를 워드가 읽어드리면서 목차에 적용하기 때문에 이를 활용하면 목차까지도 손쉽게 적용이 가능해진다.4. 정리마크다운은 기본문법만 알고있다면 일반 텍스트편집기에서도 손쉽게 작성이 가능한 마크업언어다. 현재 다양한 도구와 플랫폼에서 지원하고 있기 때문에 더욱 손쉽게 스타일적용된 문서를 작성할 수 있어 점점 널리 사용되고 있다. 마크다운을 이해하고 사용하면서 쉽고 빠르게 스타일문서를 작성해보세요.저는 Dropbox 프로를 구매해서 집-랩탑-스마트폰이 각각 연동을 시켜서 사용하고 있습니다. 드랍박스에 저장된 마크다운 문서는 Dropbox 웹서비스 상에서 제공하기 때문에 웹상에서 바로 열람할 수도 있어 링크를 걸어서 다른 사람과 공유하는 형식으로 사용하고 있다. 링크 예: Markdown 설명P.S.최근에는 Notion 을 조금씩 사용중이다. Notion 에서 작성한 문서는 Atom(https://atom.io/), Visual Studio Code(https://code.visualstudio.com/), Notepad++(https://notepad-plus-plus.org/)텍스트 편집기에 복붙(복사하고 붙여넣기)하면 마크다운문법으로 작성된 문장이 기입되고 이지윅 에디터를 제공하는 웹에디터에 붙여넣기 하면 거의 완벽한 형태로 복사된다. 그래서 애용중이다.○ 참고문서 78 Tools for writing and previewing Markdown John gruber 마크다운 번역 깃허브 취향의 마크다운 번역 허니몬의 마크다운 작성법 Notion.so(https://www.notion.so/product) Atom(https://atom.io/) Visual Studio Code(https://code.visualstudio.com/) Notepad++(https://notepad-plus-plus.org/)" } ]
